name: Deploy to EC2

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE_NAME: e-learning-backend

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            #!/bin/bash
            set -e  # Exit immediately if any command fails
            
            # 1. Create app directory
            sudo mkdir -p /app
            cd /app
            
            # 2. Create .env file
            echo "${{ secrets.ENV_FILE }}" | sudo tee .env > /dev/null
            sudo chmod 600 .env
            
            # 3. Create docker-compose.yml
            cat << 'EOF' | sudo tee docker-compose.yml > /dev/null
            version: '3.8'
            
            services:
              backend:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
                container_name: ${{ env.DOCKER_IMAGE_NAME }}
                ports:
                  - "5002:5002"
                env_file:
                  - .env
                volumes:
                  - ./logs:/app/logs
                healthcheck:
                  test: ["CMD", "node", "-e", "require('@prisma/client').PrismaClient && console.log('OK')"]
                  interval: 10s
                  timeout: 5s
                  retries: 10
                restart: unless-stopped
                depends_on:
                  postgres:
                    condition: service_healthy
            
              postgres:
                image: postgres:14-alpine
                container_name: payment_db-postgres
                env_file:
                  - .env
                volumes:
                  - postgres-data:/var/lib/postgresql/data
                healthcheck:
                  test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
                  interval: 5s
                  timeout: 5s
                  retries: 10
                restart: unless-stopped
            
            volumes:
              postgres-data:
            EOF
            
            # 4. Stop and clean existing containers
            sudo docker-compose down -v --remove-orphans || true
            
            # 5. Remove dangling images
            sudo docker image prune -af
            
            # 6. Pull the latest image
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
            
            # 7. Start services with log tailing
            sudo docker-compose up -d
            
            # 8. Wait for services to initialize
            sleep 15
            
            # 9. Verify services
            echo "=== Running Containers ==="
            sudo docker ps -a
            
            echo "=== Backend Logs ==="
            sudo docker logs ${{ env.DOCKER_IMAGE_NAME }} --tail 50 || true
            
            echo "=== Database Connection Test ==="
            sudo docker exec ${{ env.DOCKER_IMAGE_NAME }} node -e "require('@prisma/client').PrismaClient && console.log('Prisma client loaded successfully')" || true
            
            echo "=== Health Check ==="
            curl -s http://localhost:5002/health || echo "Health check failed"
            
            # 10. Final status
            echo "Deployment completed. Verify services are running:"
            sudo docker-compose ps